{"version":3,"sources":["components/CardComponent.js","components/SearchComponent.js","components/RepoList.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","AppReviewCard","props","classes","Card","className","CardHeader","action","IconButton","aria-label","title","data","CardMedia","image","CardContent","Typography","variant","color","component","desc","CardActions","disableSpacing","margin","spacing","width","SearchBarComponent","noValidate","autoComplete","TextField","id","label","RepoList","state","repos","axios","get","then","res","console","log","setState","Grid","container","direction","justify","alignItems","this","map","repo","item","xs","sm","md","key","indexOf","name","description","React","Component","App","ApolloClient","uri","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"wVAiBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,EACRC,WAAY,cAyCDC,MArCf,SAAuBC,GACrB,IAAMC,EAAUV,IAGhB,OACE,kBAACW,EAAA,EAAD,CAAMC,UAAWF,EAAQP,MACvB,kBAACU,EAAA,EAAD,CACEC,OACE,kBAACC,EAAA,EAAD,CAAYC,aAAW,YACrB,kBAAC,IAAD,OAGJC,MAAOR,EAAMS,OAEf,kBAACC,EAAA,EAAD,CACEP,UAAWF,EAAQL,MACnBe,MAAM,iGACNH,MAAM,gBAER,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,KAC3DhB,EAAMiB,OAGT,kBAACC,EAAA,EAAD,CAAaC,gBAAc,GACzB,kBAACb,EAAA,EAAD,CAAYC,aAAW,oBACrB,kBAAC,IAAD,OAEF,kBAACD,EAAA,EAAD,CAAYC,aAAW,SACrB,kBAAC,IAAD,U,SCpDJhB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJ,QAAS,CACP0B,OAAQ3B,EAAM4B,QAAQ,GACtBC,MAAO,aAeAC,MAVd,WACG,IAAMtB,EAAUV,IAEhB,OACE,0BAAMY,UAAWF,EAAQP,KAAM8B,YAAU,EAACC,aAAa,OACrD,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,a,SC4B9BC,E,4MAhCbC,MAAQ,CACNC,MAAO,I,kEAGY,IAAD,OAClBC,IAAMC,IATQ,0FAUXC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAI1B,MAChB,IAAMsB,EAAQI,EAAI1B,KAClB,EAAK6B,SAAS,CAAEP,e,+BAIZ,IAAD,OACP,OACE,6BACE,kBAACQ,EAAA,EAAD,CAAMC,WAAS,EAACnB,QAAS,EACjBoB,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEfC,KAAKd,MAAMC,MAAMc,KACjB,SAAAC,GAAI,OAAI,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAAKrB,MAAMC,MAAMqB,QAAQN,IACrE,kBAAC,EAAD,CAAerC,KAAMqC,EAAKO,KAAMpC,KAAM6B,EAAKQ,wB,GAxBlCC,IAAMC,WCkBdC,GAjBA,IAAIC,IAAa,CAC1BC,IAAM,K,uKAMR,OACE,yBAAKxD,UAAU,OACb,4BAAQA,UAAU,eAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUqD,cCPEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.36b5d8a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 300,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n}));\r\n\r\nfunction AppReviewCard(props) {\r\n  const classes = useStyles();\r\n  \r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        action={\r\n          <IconButton aria-label=\"settings\">\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        }\r\n        title={props.data}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image=\"https://repository-images.githubusercontent.com/296251555/584a8200-0025-11eb-9dea-38d89d82d5f8\"\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n        {props.desc}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton aria-label=\"add to favorites\">\r\n          <FavoriteIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"share\">\r\n          <ShareIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default AppReviewCard","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n      },\r\n    },\r\n  }));\r\n  \r\n function SearchBarComponent() {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField id=\"standard-basic\" label=\"Search\" />\r\n      </form>\r\n    );\r\n  }\r\n  \r\nexport default SearchBarComponent","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport AppReviewCard from './CardComponent.js'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\n\r\nconst ORG_QUERY = \"https://api.github.com/orgs/Block-exchange/repos?ACCEPT=application/vnd.github.v3+json\" \r\nconst HEADER = \"ACCEPT=application/vnd.github.v3+json\"\r\n\r\nclass RepoList extends React.Component {\r\n  state = {\r\n    repos: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(ORG_QUERY)\r\n      .then(res => {\r\n        console.log(res.data)\r\n        const repos = res.data;\r\n        this.setState({ repos });\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div >\r\n        <Grid container spacing={2}  \r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\">\r\n  \r\n          { this.state.repos.map(\r\n            repo => <Grid item xs={12} sm={6} md={3} key={this.state.repos.indexOf(repo)}>\r\n              <AppReviewCard data={repo.name} desc={repo.description}/></Grid>)}\r\n          \r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default RepoList","import React, {Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport axios from 'axios';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AppReviewCard from './components/CardComponent.js'\nimport SearchBarComponent from './components/SearchComponent.js'\nimport RepoList from './components/RepoList.js'\n\n\n\nconst client = new ApolloClient({\n      uri : \"\"\n});\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"/>\n        <SearchBarComponent/>\n        <RepoList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}