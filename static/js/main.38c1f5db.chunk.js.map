{"version":3,"sources":["components/CardComponent.js","components/SearchComponent.js","components/RepoList.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["token","options","headers","useStyles","makeStyles","theme","root","maxWidth","maxHeight","media","height","paddingTop","AppReviewCard","props","useState","image","setData","classes","json","title","useEffect","fetchData","a","axios","post","then","res","data","repository","openGraphImageUrl","catch","err","console","log","Card","className","CardHeader","action","IconButton","aria-label","CardMedia","CardContent","Typography","variant","color","component","desc","marginLeft","marginTop","SearchBarComponent","count","setCount","value","onChange","newValue","onRequestSearch","this","state","doSomethingWith","paddingLeft","RepoList","repos","get","Grid","container","spacing","map","repo","item","xs","sm","md","name","description","flexGrow","MyAppBar","AppBar","position","Toolbar","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.38c1f5db.chunk.js","sourcesContent":["import React ,  { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\n\r\nconst url = 'https://api.github.com/graphql'\r\nconst token = \"a4478bb771d7a43232f55169f65435a41953c7c2\"\r\n\r\nconst options = {\r\n  headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': token ? `Bearer ${token}` : \"\",\r\n  }\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 250,\r\n    maxHeight: 300,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\n\r\nfunction AppReviewCard(props) {\r\n  const [image, setData] = useState([]);\r\n  const classes = useStyles();\r\n  const json = {'query' : '{repository (owner: \"Block-Exchange\", name: \"'+ props.title +'\") {openGraphImageUrl}}' }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  const fetchData = async () => {\r\n        const res = await axios.post(url,json, options)\r\n            .then((res) => {\r\n              setData(res.data.data.repository.openGraphImageUrl);\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n        })\r\n    };\r\n  \r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        action={\r\n          <IconButton aria-label=\"settings\">\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        }\r\n        title={props.title}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={image}\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n        {props.desc}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default AppReviewCard","import React ,  { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport { CenterFocusStrong } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 500,\r\n    marginLeft: 500,\r\n    marginTop:50,\r\n  },\r\n\r\n}));\r\n\r\n\r\nfunction doSomethingWith (){\r\n  this.state = \"\"\r\n}\r\n\r\n\r\n\r\nfunction SearchBarComponent (){\r\n  const classes = useStyles();\r\n  const [count, setCount] = useState();\r\n\r\n      return (\r\n         <SearchBar\r\n          className={classes.root}\r\n          value={count}\r\n          onChange={(newValue) => setCount({ value: newValue })}\r\n          onRequestSearch={() => doSomethingWith(this.state.value)}\r\n        />\r\n    );\r\n}\r\n  \r\nexport default SearchBarComponent","import React ,  { useState, useEffect } from 'react';\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nimport AppReviewCard from './CardComponent.js'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n\r\n\r\n\r\nconst ORG_QUERY = \"https://api.github.com/orgs/Block-exchange/repos?ACCEPT=application/vnd.github.v3+json\" \r\nconst HEADER = \"ACCEPT=application/vnd.github.v3+json\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: '80px',\r\n    marginTop:50,\r\n  },\r\n\r\n}));\r\n\r\n\r\n\r\nfunction RepoList () {\r\n    const classes = useStyles();\r\n    const [repos, setData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n      }, []);\r\n\r\n    \r\n    const fetchData = async () => {\r\n      const res = await axios.get(\r\n        ORG_QUERY,\r\n      );\r\n      setData(res.data);\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container spacing={3} className={classes.root}>\r\n  \r\n          {\r\n           repos.map(\r\n                      repo => <Grid item xs={12} sm={6} md={3}>\r\n                      <AppReviewCard title={repo.name} desc={repo.description}/>\r\n                      </Grid>)\r\n          }\r\n          \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default RepoList","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n  \r\n function MyAppBar() {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar variant=\"dense\">\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              Block Exchange\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  export default MyAppBar","import React, {Component} from 'react';\nimport './App.css';\n\nimport AppReviewCard from './components/CardComponent.js'\nimport SearchBarComponent from './components/SearchComponent.js'\nimport RepoList from './components/RepoList.js'\nimport MyAppBar from './components/navbar.js'\n\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n          <MyAppBar/>\n          <div className=\"App-header\"/>\n          <SearchBarComponent/>\n          <RepoList/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}